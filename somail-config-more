#!/bin/bash
#
#########################################
# Variables
#########################################
DEBUG="0"
HOSTNAME=`hostname`
IP=`ifconfig |grep "inet addr" | awk '{print $2}' |cut -d\: -f2 |grep -v "127.0.0.1" |head -1`
TITLE="Security Onion Email Setup ($HOSTNAME)"
if [ -f /etc/postfix/main.cf ];then
	REMOTE=`grep -o 'relayhost =.*' /etc/postfix/main.cf | cut -f2- -d'='| cut -f2 -d' '`
else
	REMOTE=''
fi 
[ -f /etc/aliases ] && ADMINADDR=`grep -o 'root:.*' /etc/aliases | cut -f2- -d' '`
FROMADDRESS="no-reply"
SOSTATSUMMARY="Not Configured"
BROSUMMARY="Not Configured"
OSSECSUMMARY="Not Configured"
SGUILSUMMARY="Not Configured"
ELSASUMMARY="Not Configured"
ELSAUSER="Not Configured"
ELSASERVER="Not Configured"
#########################################
# Welcome Screen
#########################################
TEXT="<b>Welcome to Security Onion Email Setup!</b>\n\
\n\
This program will allow you to configure email for Security Onion on $HOSTNAME.\n\
\n\
Please note, this script will install mailutils if it is not already installed.
\n\
Would you like to continue?"
YES="Yes, Continue!"
NO="No, Quit."
zenity --question --title="$TITLE" --text="$TEXT" --ok-label="$YES" --cancel-label="$NO" --no-wrap
ANSWER="$?"
if [ $ANSWER -eq 1 ]; then
	[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked No.  Exiting Setup"
        exit 1
else
        [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Yes.  Continuing Setup."
fi
TEXT="What type of deployment are you currently running?"
COMPONENTS=`zenity --height=300 --list --radiolist --column="1" --column="2" --hide-header --title="$TITLE" --text="$TEXT" TRUE Server FALSE Sensor FALSE Standalone`

case $COMPONENTS in
        Standalone)
                SERVER="1"
                SENSOR="1"
		[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked OK.  Selected Standalone."
                ;;
        Server)
                SERVER="1"
                [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked OK.  Selected Server."
		;;
        Sensor)
                SENSOR="1"
                [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked OK.  Selected Sensor."
		;;
        *)
		[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Cancel.  Exiting Setup."
                exit 1
		;;
esac
#########################################
# Notification Address
#########################################
NOTIFY_CONFIRMED="no"
while [ $NOTIFY_CONFIRMED = "no" ]; do
	TEXT="What would you like to specify for the notification address?"
	NOTIFYADDRESS=`zenity --title="$TITLE" --text="$TEXT" --entry --entry-text="$ADMINADDR"`
	ANSWER="$?"
	if [ $ANSWER -eq 1 ]; then
        	[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked No.  Exiting Setup"
        	exit 1
	else
		if ! [[ "$NOTIFYADDRESS" == ?*@?*.?* ]]; then
                        zenity --error --title "$TITLE" --text="Please provide a valid response\!"
                else
                        [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Yes.  Configuring notification address."
			NOTIFY_CONFIRMED="yes"
                fi
	fi
done
#########################################
# Mail server
#########################################
MAILSERVER_CONFIRMED="no"
while [ $MAILSERVER_CONFIRMED = "no" ]; do
	TEXT="What address would you like to specify for the mail (SMTP) server?"
	MAILSERVER=`zenity --title="$TITLE" --text="$TEXT" --entry --entry-text="$REMOTE"`
	ANSWER="$?"
	if [ $ANSWER -eq 1 ]; then
        	[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked No.  Exiting Setup"
        	exit 1
	else
		if ! [[ "$MAILSERVER" == ?*.?*.?* ]]; then
                        zenity --error --title "$TITLE" --text="Please provide a valid response\!"
                else
                        [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Yes.  Configuring SMTP server."
			MAILSERVER_CONFIRMED="yes"
                fi
	fi
done
#########################################
# Sostat email
#########################################
TEXT="Would you like to configure daily email for sostat output?"
YES="Yes"
NO="No"
zenity --question --title="$TITLE" --text="$TEXT" --ok-label="$YES" --cancel-label="$NO" --no-wrap
ANSWER="$?"
if [ $ANSWER -eq 1 ]; then
        [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked No.  Not configuring email for sostat output."
else
        [  $DEBUG -eq 1 ] && echo "DEBUG: Clicked Yes.  Configuring sostat email."
	SOSTAT_CONFIRMED="yes"
	SOSTATADDRESS="root@localhost"
	SOSTATSUMMARY="Configured"
fi
#########################################
# Bro email
#########################################
if [[ $SENSOR -eq 1 ]];then
	TEXT="Would you like to configure email alerts for Bro?"
	YES="Yes"
	NO="No"
	zenity --question --title="$TITLE" --text="$TEXT" --ok-label="$YES" --cancel-label="$NO" --no-wrap
	ANSWER="$?"
	if [ $ANSWER -eq 1 ]; then
        	[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked No.  Not configuring email for Bro."
	else
        	[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Yes.  Configuring email for Bro."
		BROADDRESS="root@localhost"
		BROSUMMARY="Configured"
	fi
fi
#########################################
# Sguil email
#########################################
if [[ $SERVER -eq 1 ]];then
	TEXT="Would you like to configure email alerts for Sguil?"
	YES="Yes"
	NO="No"
	zenity --question --title="$TITLE" --text="$TEXT" --ok-label="$YES" --cancel-label="$NO" --no-wrap
	ANSWER="$?"
	if [ $ANSWER -eq 1 ]; then
        	[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked No.  Not configuring email for Sguil."
	else
        	[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Yes.  Configuring email for Sguil."
		SGUILADDRESS="root@localhost"
		SGUILSUMMARY="Configured"
	fi
fi
#########################################
# OSSEC email
#########################################
TEXT="Would you like to configure email alerts for OSSEC?"
YES="Yes"
NO="No"
zenity --question --title="$TITLE" --text="$TEXT" --ok-label="$YES" --cancel-label="$NO" --no-wrap
ANSWER="$?"
if [ $ANSWER -eq 1 ]; then
        [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked No.  Not configuring email for OSSEC."
else
        [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Yes.  Configuring email for OSSEC."
	OSSECADDRESS="root@localhost"
	OSSECSUMMARY="Configured"
fi
#########################################
#ELSA email
#########################################
if [[ $SERVER -eq 1 ]];then
	TEXT="Would you like to configure email alerts for ELSA?"
	YES="Yes"
	NO="No"
	zenity --question --title="$TITLE" --text="$TEXT" --ok-label="$YES" --cancel-label="$NO" --no-wrap
	ANSWER="$?"
	if [ $ANSWER -eq 1 ]; then
        	[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked No.  Not configuring email for ELSA."
	else
        	[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Yes.  Configuring email for ELSA."
		ELSAADDRESS="root@localhost"
		ELSASUMMARY="Configured"
        	ELSA_USER_CONFIRMED="no"
		while [ $ELSA_USER_CONFIRMED = "no" ]; do	
			TEXT="What is the ELSA username to which this email address is associated?"
        		ELSAUSER=`zenity --title="$TITLE" --text="$TEXT" --entry --entry-text="$SUDO_USER"`
        		ANSWER="$?"
			if [ $ANSWER -eq 1 ]; then
				[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Cancel.  Exiting Setup."
				exit 1
			else
				if [ -z $ELSAUSER ]; then
                        		zenity --error --title "$TITLE" --text="Please provide a valid response\!"
                		else
                        		[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked OK.  Configuring ELSA username."
					ELSA_USER_CONFIRMED="yes"
                		fi
			fi
        	done
		#########################################
		# ELSA server IP/Hostname
        	#########################################
        	ELSASERVER_CONFIRMED="no"
		while [ $ELSASERVER_CONFIRMED = "no" ]; do	
			TEXT="What is the ELSA server IP/hostname for which you wish to alert?"
        		ELSASERVER=`zenity --title="$TITLE" --text="$TEXT" --entry --entry-text="$IP"`
        		ANSWER="$?"
			if [ $ANSWER -eq 1 ]; then 
				[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Cancel.  Exiting Setup."
				exit 1
			else
				if [ -z $ELSASERVER ]; then 
                        		zenity --error --title "$TITLE" --text="Please provide a valid response\!"
                		else
                        		[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked OK.  Configuring ELSA server."
					ELSASERVER_CONFIRMED="yes"
                		fi
			fi
		done
	fi
fi
#########################################
# Summary
#########################################
TEXT="The following will be configured for $HOSTNAME:\n\
\n\
<b>Notification address</b>: $NOTIFYADDRESS\n\
<b>Mail server</b>: $MAILSERVER\n\
<b>Daily sostat email</b>:$SOSTATSUMMARY\n\
<b>Bro email</b>:$BROSUMMARY\n\
<b>Sguil email</b>:$SGUILSUMMARY\n\
<b>OSSEC email</b>:$OSSECSUMMARY\n\
<b>ELSA email</b>:$ELSASUMMARY\n\
<b>ELSA username</b>: $ELSAUSER\n\
<b>ELSA server</b>: $ELSASERVER\n\
\n\Please note, services will restart upon confirmation."

YES="Yes, Continue!"
NO="No, Quit."
zenity --question --title="$TITLE" --text="$TEXT" --ok-label="$YES" --cancel-label="$NO" --no-wrap
ANSWER="$?"
if [ $ANSWER -eq 1 ]; then
        [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked No.  Exiting Setup"
	exit 1
else
        [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Yes.  Configuration confirmed."
fi

#########################################
# Begin function CONFIGURE_EMAIL
#########################################
function CONFIGURE_EMAIL() {

#Check if mailutils installed.  If not, install it.
if dpkg -l | grep -q -i "mailutils"; then
        :
else
	apt-get install -y mailutils > /dev/null 2>&1
fi

echo "10"
echo "# Configuring system mail..."
#Configure system 'notification' address
ALIASES="/etc/aliases"
if  grep -q "root:" $ALIASES;then
        sed -i "s|^root:.*$|root: $NOTIFYADDRESS|g" $ALIASES
else
        sed -i "/postmaster/a root: $NOTIFYADDRESS" $ALIASES
fi
newaliases > /dev/null 2>&1
#Configure system from address
POSTFIX="/etc/postfix/main.cf"
#Configure system mail server
sed -i "s|^relayhost = .*$|relayhost = $MAILSERVER|g" $POSTFIX
service postfix restart > /dev/null 2>&1
#Configure sostat
echo "15"
echo "# Configuring sostat mail..."
if ! [[ "$SOSTATSUMMARY" == "Not Configured" ]]; then
	SOSTAT="/etc/cron.d/sostat"
	touch $SOSTAT
	echo -e '#/etc/cron.d/sostat\n#\n#crontab entry to run sostat and email its output\n\n\nSHELL=/bin/sh\nPATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\nEMAIL=root@localhost\nHOSTNAME='$HOSTNAME'\n\n01 12 * * * root /usr/bin/sostat 2>&1 | mail -aFrom:SecurityOnion@$HOSTNAME -s "Statistics for $HOSTNAME" $EMAIL' > $SOSTAT
fi
#Configure Bro
echo "30"
echo "# Configuring Bro email..."
if ! [[ "$BROSUMMARY" == "Not Configured" ]]; then
	BROCTL="/opt/bro/etc/broctl.cfg"
	sed -i "s|^MailTo.*$|MailTo = $BROADDRESS|g" $BROCTL
        if grep -q "tracesummary=" $BROCTL;then
        	sed -i "s|^tracesummary=.*$|tracesummary=|g" $BROCTL
	else
		sed -i '/MailTo/a tracesummary=' $BROCTL
        fi
	LOCALBRO="/opt/bro/share/bro/site/local.bro"
        if grep -q -i "email" $LOCALBRO;then
        	:
        else
        	echo -e "\n# Bro Notice email configuration\nhook Notice::policy(n: Notice::Info)\n             {       \n      add n\$actions[Notice::ACTION_ALARM];\n         }" >> $LOCALBRO
        fi
	nsm_sensor_ps-restart --only-bro > /dev/null
fi
#Configure Sguil
echo "45"
echo "# Configuring Sguil email..."
if ! [[ "$SGUILSUMMARY" == "Not Configured" ]]; then

	SGUILDEMAIL="/etc/nsm/securityonion/sguild.email"
	sed -i "s|^set EMAIL_EVENTS.*$|set EMAIL_EVENTS 1|g" $SGUILDEMAIL
        sed -i "s|^set SMTP.*$|set SMTP_SERVER localhost|g" $SGUILDEMAIL
        sed -i "s|^set EMAIL_RCPT.*$|set EMAIL_RCPT_TO \"root@localhost\"|g" $SGUILDEMAIL
        sed -i "s|^set EMAIL_FROM.*$|set EMAIL_FROM \"Sguil\"|g" $SGUILDEMAIL
	nsm_server_ps-restart > /dev/null
fi
echo $FROMADDRESS
#Configure OSSEC
echo "60"
echo "# Configuring OSSEC email..."
if ! [[ "$OSSECSUMMARY" == "Not Configured" ]]; then
	OSSECCONF="/var/ossec/etc/ossec.conf"
        sed -i 's/.*email_notification.*/     <email_notification>yes<\/email_notification>/' $OSSECCONF
	if grep -q -i "smtp" $OSSECCONF;then
		sed -i 's/.*email_to.*/     <email_to>root@localhost<\/email_to>/' $OSSECCONF
                sed -i 's/.*smtp_server.*/     <smtp_server>localhost<\/smtp_server>/' $OSSECCONF
                sed -i 's/.*email_from.*/     <email_from>no-reply<\/email_from>/' $OSSECCONF
                sed -i 's/.*email_maxperhour.*/     <email_maxperhour>20<\/email_maxperhour>/' $OSSECCONF
        else
                sed -i '/.*email_notification.*/ a \     <email_to>root@localhost<\/email_to>' $OSSECCONF
               	sed -i '/.*email_to.*/ a \     <smtp_server>localhost<\/smtp_server>' $OSSECCONF
                sed -i '/.*smtp_server.*/ a \     <email_from>no-reply<\/email_from>' $OSSECCONF
                sed -i '/.*email_from.*/ a \     <email_maxperhour>\100\<\/email_maxperhour>' $OSSECCONF
        fi
	service ossec-hids-server restart > /dev/null
fi
#Configure ELSA
echo "75"
echo "# Configuring ELSA email..."
if ! [[ "$ELSASUMMARY" == "Not Configured" ]]; then
	ELSAWEB="/etc/elsa_web.conf"
	mysql --defaults-file=/etc/mysql/debian.cnf -Dsecurityonion_db -e "update user_info set email='$ELSAADDRESS' where username='$ELSAUSER';"
        sed -i 's#.*display_address.*#    "display_address": "ELSA@'$HOSTNAME'",#g' $ELSAWEB
	sed -i 's#.*base_url.*#    "base_url": "https://'$ELSASERVER'/elsa-query",#g' $ELSAWEB
	if grep -q -i "smtp" $ELSAWEB;then
                sed -i 's#.*smtp_server.*#    "smtp_server": "localhost",#g' $ELSAWEB
        else
                sed -i '/.*base_url.*/ a \    "smtp_server": "localhost",' $ELSAWEB
        fi
	service apache2 restart > /dev/null 2>&1
fi
}
CONFIGURE_EMAIL | zenity --progress --title="$TITLE" --text="Please wait while making changes to the system..." --percentage=0 --auto-close
########################################
# Setup Complete
########################################
TEXT="<b>Security Onion Email Setup is now complete!</b> \n \
\n \
If you would like to edit the email configuration manually, please refer to:\n
https://github.com/Security-Onion-Solutions/security-onion/wiki/Email\n"
zenity --info --title="$TITLE" --text="$TEXT" --no-wrap
